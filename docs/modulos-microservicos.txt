---

# üèóÔ∏è M√≥dulos/Microservi√ßos do *Pepeta Royale*

---

## üéÆ **Game Client (C++/SDL2/OpenGL)**

**Responsabilidade:** interface direta com o jogador (inputs, HUD, render, QTE, l√≥gica determin√≠stica local).

* **Entradas:**

  * Inputs do jogador (teclado/mouse/touch).
  * Pacotes de rede (estado de lobby, comandos de outros jogadores).
  * Configs de build (JSON/YAML baixado do Balance Service).

* **Sa√≠das:**

  * Comandos de input para o Net Sync Service.
  * Eventos de telemetria (FPS, QTE accuracy) para Telemetry Service.
  * Logs locais.

* **Comunica√ß√£o:** UDP confi√°vel (ENet/Asio) para sincroniza√ß√£o de inputs; HTTP/REST para autentica√ß√£o inicial.

---

## üîó **Net Sync Service**

**Responsabilidade:** orquestrar a sincroniza√ß√£o determin√≠stica das partidas.

* **Entradas:**

  * Comandos de input dos clientes.
  * Seed de partida (para RNG determin√≠stico).

* **Sa√≠das:**

  * Ticks consolidados (inputs agregados).
  * Confirma√ß√£o de integridade (checksum de estado).
  * Pacotes de corre√ß√£o (snapshot/rollback em caso de diverg√™ncia).

* **Comunica√ß√£o:**

  * UDP (tempo real) ‚Üí lockstep.
  * WebSocket (fallback) ‚Üí relay em casos de NAT restrito.

---

## üè† **Lobby & Matchmaking Service**

**Responsabilidade:** criar, listar e gerenciar lobbies; emparelhar jogadores em partidas.

* **Entradas:**

  * Solicita√ß√µes HTTP/REST do cliente (criar/joinar lobby, matchmaking).

* **Sa√≠das:**

  * C√≥digo/link do lobby.
  * Lista de jogadores conectados.
  * Endere√ßo/porta do Net Sync Service designado.

* **Comunica√ß√£o:** REST/HTTP + WebSocket para atualiza√ß√µes em tempo real.

---

## üèÜ **Ranking & Profile Service**

**Responsabilidade:** gerenciar perfis, hist√≥rico de partidas, progress√£o cosm√©tica e MMR.

* **Entradas:**

  * Resultados finais de partidas (do Net Sync Service).
  * Consultas de perfil (do cliente).

* **Sa√≠das:**

  * Atualiza√ß√£o de MMR/Elo.
  * Estat√≠sticas de temporada.
  * Invent√°rio de cosm√©ticos do jogador.

* **Comunica√ß√£o:** REST/HTTP (consulta de perfil); gRPC/REST interno (com Matchmaking e Telemetry).

---

## ‚öñÔ∏è **Balance & Content Service**

**Responsabilidade:** servir arquivos de configura√ß√£o de builds, patch notes e balanceamento.

* **Entradas:**

  * Atualiza√ß√µes do time de game design (JSON/YAML).

* **Sa√≠das:**

  * Configura√ß√µes baixadas pelos clientes na inicializa√ß√£o.
  * Par√¢metros de builds aplicados pelo Net Sync Service.

* **Comunica√ß√£o:** CDN/HTTP (download de configs).

---

## üìä **Telemetry & Anti-Cheat Service**

**Responsabilidade:** coletar m√©tricas de jogo e detectar comportamento suspeito.

* **Entradas:**

  * Eventos dos clientes (lat√™ncia, FPS, QTE timing).
  * Estados e checksums do Net Sync Service.

* **Sa√≠das:**

  * Alertas de poss√≠vel cheat.
  * Relat√≥rios de m√©tricas (Prometheus/Grafana).

* **Comunica√ß√£o:** gRPC ou Kafka/NATS (stream de eventos).

---

## üîí **Auth & Identity Service**

**Responsabilidade:** autentica√ß√£o de jogadores e gest√£o de sess√µes.

* **Entradas:**

  * Login via email/OAuth.

* **Sa√≠das:**

  * JWT + refresh tokens.
  * Device binding opcional.

* **Comunica√ß√£o:** REST/HTTP (para clientes e outros servi√ßos).

---

# üì° Comunica√ß√£o entre m√≥dulos

* **Cliente ‚Üî Net Sync Service:** UDP confi√°vel (inputs determin√≠sticos).
* **Cliente ‚Üî Lobby Service:** REST/HTTP + WebSocket (criar/entrar em lobby, matchmaking).
* **Cliente ‚Üî Ranking/Profile:** REST/HTTP (consultar perfil, ranking, skins).
* **Cliente ‚Üî Balance Service:** HTTP/CDN (baixar configs de builds).
* **Cliente ‚Üî Auth Service:** REST/HTTP (login).
* **Servi√ßos internos:** gRPC/Kafka para alta performance (Telemetry, Ranking, Anti-Cheat).

---

# üîë Benef√≠cios dessa modulariza√ß√£o

* **Escalabilidade:** cada servi√ßo pode ser replicado horizontalmente (mais inst√¢ncias).
* **Resili√™ncia:** falha no Ranking n√£o derruba a partida em andamento (desacoplamento).
* **Flexibilidade:** podemos trocar Balance Service (JSON ‚Üí DB) sem tocar no cliente.
* **Seguran√ßa:** Auth centralizado, Net Sync blindado contra pacotes inv√°lidos.
* **Evolu√ß√£o Caracol:** come√ßamos simples (Lobby + Net Sync + Ranking em mon√≥lito leve), depois separamos em microservi√ßos.

---
